import java.lang.Math;
import java.util.Scanner;
import java.io.*;

public class ImageEditor{
  public static void main(String[] args){
//Get input file. If error, catch and output error
	  String inputFileName = args[0];
	  System.out.println("Input file name: " + inputFileName);
	  try{
		  File temp = new File(inputFileName);
		  FileReader fileReader = new FileReader(temp);
//		  System.out.println("Created File Reader");
		  BufferedReader bufferedReader = new BufferedReader(fileReader);
//		  System.out.println("Created Buffered Reader");
		  //Successfully got input file. Set up scanner
		  Scanner myScanner = new Scanner(temp);
//		  System.out.println("Created Scanner");
		  myScanner.useDelimiter("\\s*#.*\n\\s*|\\s+");//This delimiter will cut out all comments
		  //while(myScanner.hasNext()){
		  //	String temp = myScanner.next();
		  //	System.out.println(temp);
		  //}
//		  System.out.println("Dilimeter set");
		  System.out.println(myScanner.next() + " tag found");//P3 tag not used
		  int width = myScanner.nextInt();
		  System.out.print("Width = ");
		  System.out.println(width);
		  int height = myScanner.nextInt();
//		  System.out.print("Height = ");
//		  System.out.println(height);
//		  System.out.println("Max color value: "+ myScanner.nextInt());//Max color value (255 by default. This number will not be used for this lab)
		  myScanner.nextInt();
	//RGB colors, in sets of three
		  Image myImage = new Image(width, height);
		  for(int j=0;j<height;j++){
			  for(int i=0;i<width;i++){
			  
				  //myImage.pixels[i][j] = new Pixel(myScanner.nextInt(),myScanner.nextInt(),myScanner.nextInt());
				  myImage.pixels[i][j].setRed(myScanner.nextInt());
				  myImage.pixels[i][j].setGreen(myScanner.nextInt());
				  myImage.pixels[i][j].setBlue(myScanner.nextInt());
			  }
		  }
		  bufferedReader.close();
		  myScanner.close();
		 // System.out.println("Image setup complete");
	//Image setup complete. Now perform transformation specified by user input
		  ImageEditor editor = new ImageEditor();
		  PrintWriter writer = new PrintWriter(args[1]);
		  if(args[2].equals("motionblur")){
			  System.out.println("Preforming Motion Blur");
			  int i = Integer.parseInt(args[3]);
			  if(i<=0){
				  System.out.println("Number must be greater than 0");
				  writer.close();
				  return;
			  }
			  Image modifiedImage = new Image(width,height);
			  modifiedImage = editor.motionBlur(myImage,i);
			  String output = modifiedImage.toString();
			  //Output to file
			  writer.println(output);
		  }
		  else if(args[2].equals("emboss")){
			  System.out.println("Preforming Emboss");
			  Image modifiedImage = new Image(width,height);
			  modifiedImage = editor.embosse(myImage);
			  String output = modifiedImage.toString();
			  //Output to file
			  writer.println(output);
		  }
		  else if(args[2].equals("invert")){
			  System.out.println("Preforming Inversion");
			  Image modifiedImage = new Image(width,height);
			  modifiedImage = editor.inversion(myImage);
			  String output = modifiedImage.toString();
			  //Output to file
			  writer.println(output);
		  }
		  else if(args[2].equals("grayscale")){
			  System.out.println("Preforming Grayscale");
			  Image modifiedImage = new Image(width,height);
			  modifiedImage = editor.grayscale(myImage);
			  String output = modifiedImage.toString();
			  //Output to file
			  writer.println(output);
		  }
		  writer.close();
		  System.out.println("Done!");

	  }
	  catch(FileNotFoundException ex){
		  System.out.println("Could not open file: '" + inputFileName + "'");
	  }
	  catch(IOException ex) {
		  System.out.println("Error reading file '" + inputFileName + "'");                  
	  }
	  catch(ArrayIndexOutOfBoundsException ex){
		  System.out.println("Array out of bounds. Please try again");
		  System.out.println("Exception: " + ex);
	  }
  }
  
  public Image grayscale(Image image){
    int x = image.getWidth();
    int y = image.getHeight();
    Image newImage = new Image(x,y);
    for(int i=0;i<x;i++){
      for(int j=0;j<y;j++){
        int average = (image.pixels[i][j].getRed() + image.pixels[i][j].getGreen() +
        image.pixels[i][j].getBlue())/3;
        newImage.pixels[i][j].setRed(average);
        newImage.pixels[i][j].setGreen(average);
        newImage.pixels[i][j].setBlue(average);
      }
    }
    return newImage;
  }

  public Image embosse(Image image){
    int x = image.getWidth();
    int y = image.getHeight();
    int max;
    int redDiff;
    int greenDiff;
    int blueDiff;
    Image newImage = new Image(x,y);
    for(int i=0;i<x;i++){
      for(int j=0;j<y;j++){
    	max=0;
        if(i==0||j==0){
//		  System.out.println("IT IS LESS THAN 0--------------");
        	max=128;
        }
        else{
//          System.out.println("R: " + image.pixels[i][j].getRed() + 
//        		  " G: " + image.pixels[i][j].getGreen() + 
//        		  " B: " + image.pixels[i][j].getBlue());
//          System.out.println("R: " + image.pixels[i-1][j-1].getRed() + 
//        		  " G: " + image.pixels[i-1][j-1].getGreen() + 
//        		  " B: " + image.pixels[i-1][j-1].getBlue());
          redDiff = image.pixels[i][j].getRed() - image.pixels[(i-1)][(j-1)].getRed();
          greenDiff = image.pixels[i][j].getGreen() - image.pixels[(i-1)][(j-1)].getGreen();
          blueDiff = image.pixels[i][j].getBlue() - image.pixels[(i-1)][(j-1)].getBlue();
//          System.out.println("RD: " + redDiff + " GD: " + greenDiff + " BD: " + blueDiff);
          max = Math.abs(blueDiff) > Math.abs(greenDiff) ? blueDiff : greenDiff;
//		  System.out.println("MaxGB: " + max);
          max = Math.abs(max) > Math.abs(redDiff) ? max : redDiff;
//          System.out.println("Max: " + max);
          max += 128;
//		  System.out.println("Max after: " + max);
//		  System.out.println("---------");
          if(max<0){
            max=0;
          }
          else if(max>255){
            max=255;
          }
//		  System.out.println("Max after change: " + max);
        }
        newImage.pixels[i][j].setRed(max);
        newImage.pixels[i][j].setGreen(max);
        newImage.pixels[i][j].setBlue(max);
      }
    }
    return newImage;
  }
  //use as much as you can. Pixels on edge will not change
  public Image motionBlur(Image image,int n){
    int x=image.getWidth();
    int y=image.getHeight();
    Image newImage = new Image(x,y);
    for(int i=0;i<x;i++){
      for(int j=0;j<y;j++){
        int averageRed=0;
        int averageGreen=0;
        int averageBlue=0;
        int numberOfPixelsUsed = 0;
        for(int k=j;k<(n+j);k++){
          if(k==y){
            break;
          }
          numberOfPixelsUsed++;
          averageRed += image.pixels[i][k].getRed();
          averageGreen += image.pixels[i][k].getGreen();
          averageBlue += image.pixels[i][k].getBlue();
        }
        averageRed = averageRed/(numberOfPixelsUsed);
        averageBlue = averageBlue/(numberOfPixelsUsed);
        averageGreen = averageGreen/(numberOfPixelsUsed);
        newImage.pixels[i][j].setRed(averageRed);
        newImage.pixels[i][j].setGreen(averageGreen);
        newImage.pixels[i][j].setBlue(averageBlue);
      }
    }
    return newImage;
  }
  
  public Image inversion(Image image){
    int x = image.getWidth();
    int y = image.getHeight();
    Image newImage = new Image(x,y);
    for(int i=0;i<x;i++){
      for(int j=0;j<y;j++){
        int invertedRed = Math.abs(image.pixels[i][j].getRed() - 255);
        int invertedGreen = Math.abs(image.pixels[i][j].getGreen() - 255);
        int invertedBlue = Math.abs(image.pixels[i][j].getBlue() - 255);
        newImage.pixels[i][j].setRed(invertedRed);
        newImage.pixels[i][j].setGreen(invertedGreen);
        newImage.pixels[i][j].setBlue(invertedBlue);
      }
    }
    return newImage;
  }
}
