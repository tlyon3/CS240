package spell;

public class Dictionary implements ITrie{

	Dictionary(){
		root = new Node();
		nodeCount = 0;
		wordCount = 0;
	}
	private Node root;
	private int nodeCount;
	private int wordCount;
	@Override
	public void add(String word) {
		insertReflexive(root, word, 0, word.length());
	}
	
	public void insertReflexive(Node n, String s, int i, int max){
		if(n.nodes[s.charAt(i)] == null){
			n.nodes[s.charAt(i)] = new Node();
			nodeCount++;
		}
		if(i==max){
			if(n.nodes[s.charAt(i)].getValue()==0)
				wordCount++;
			n.nodes[s.charAt(i)].increaseCount();
			return;
		}
		else{
			insertReflexive(n.nodes[s.charAt(i)],s,++i,max);
		}
	}

	@Override
	public INode find(String word) {
		return findReflexive(root, word, 0,word.length());
		
	}
	
	public INode findReflexive(Node n, String s, int i, int max){
		if(n.nodes[s.charAt(i) - 'a'] == null){
			return null;
		}
		if(i==max){
			return n.nodes[s.charAt(i) - 'a'];
		}
		else{
			return findReflexive(n.nodes[s.charAt(i)-'a'],s,++i,max);
		}
		
	}
	
	@Override
	public String toString(){
		StringBuilder word = new StringBuilder();
		StringBuilder output = new StringBuilder();
		toStringHelper(root, word, output);
		return output.toString();
	}
	private void toStringHelper(Node n, StringBuilder word, StringBuilder output){
		if(n==null)
			return;
		if(n.getValue() > 0){
			output.append(word.toString() + "\n");
		}
		else{
			for(int i=0;i<26;i++){
				word.append('a'+i);
				toStringHelper(n.nodes[i],word,output);
				word.setLength(word.length()-1);
			}
		}
	}
	
	public int getWordCount() {
		return wordCount;
	}

	@Override
	public int getNodeCount() {
		return nodeCount;
	}
	
	public String[] modify(String word){
		String[] newWords;
		deletion(newWords,word);
		insertion(newWords, word);
		trasposition(newWords,word);
		alteration(newWords, word);
		return newWords;
	}
	public void deletion(String[] newWords, String word){
		
	}
	public void insertion(String[] newWords, String word){
		
	}
	public void trasposition(String[] newWords, String word){
		
	}
	public void alteration(String[] newWords, String word){
		
	}
}
