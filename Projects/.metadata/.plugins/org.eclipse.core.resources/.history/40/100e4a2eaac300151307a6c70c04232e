package hangman;

import java.util.Set;
import java.util.HashSet;
import java.io.*;
import java.util.Scanner;
import java.util.Map;
import java.util.Iterator;

public class EvilHangman implements IEvilHangmanGame {
	EvilHangman(){
		madeGuesses = new HashSet<Character>();
		dict = new Dictionary();
		correctGuesses = new HashSet<Character>();
	}
	Dictionary dict;
	Set<Character> correctGuesses;
	public static void main(String[] args){
		try{
			String dictionary = new String();
			dictionary = args[0];
			java.io.File temp = new File(dictionary);
			int wordLength = Integer.parseInt(args[1]);
			int guesses = Integer.parseInt(args[2]);
			EvilHangman myGame = new EvilHangman();
			myGame.startGame(temp, wordLength);
			int i=0;
			Scanner userInput = new Scanner(System.in);
			while(i!=guesses){
				System.out.println("Make a guess!");
				System.out.println("You have " + (guesses-i) + " guesses remaining");
				System.out.print("Previous guesses: ");
				for(char c : myGame.madeGuesses){
					System.out.print(c+" ");
				}
				System.out.println();
				//try catch block for GuessAlreadyMadeException
				try{
					String guess = new String();
					while(true){
						guess = userInput.next();
						if(guess.length() != 1)
							System.out.println("Please enter a single character");
						else
							break;
					}
					char charGuess = guess.charAt(0);
					if(myGame.madeGuesses.contains(charGuess)){
						throw new GuessAlreadyMadeException();
					}
					Set<String> newWords = myGame.makeGuess(charGuess);
					if(newWords.isEmpty()){
						System.out.println("Sorry! There are no '"+charGuess+"' in the word");
					}
					else{
						myGame.dict.setWords(newWords);
					}
					//increment guess counter
					i++;
				}
				catch(GuessAlreadyMadeException ex){
					System.out.println("You have already guessed that letter!");
				}
			}
			userInput.close();
			//if they guess the word, say they one
			//else, say they lost and output the word
		}
		catch(ArrayIndexOutOfBoundsException ex){
			System.out.println("Number of arguments invalid.");
		}
	}
	private HashSet<Character> madeGuesses;
	 
	@Override
	public void startGame(File dictionary, int wordLength) {
		// TODO Auto-generated method stub
		try{
			FileReader myReader = new FileReader(dictionary);
			Scanner myScanner = new Scanner(dictionary);
			while(myScanner.hasNext()){
				String next = myScanner.next();//possible problem with memory?
				if(next.length() == wordLength)
					dict.addWord(next);
			}
			myReader.close();
			myScanner.close();
		}
		catch(IOException ex){
			System.out.println("Error reading file '" + dictionary.toString() + "'");
		}
	}

	@Override
	public Set<String> makeGuess(char guess) throws GuessAlreadyMadeException {
		// TODO Auto-generated method stub
		madeGuesses.add(guess);
		Map<String,Set<String>> patternMap = dict.makePatternSet(guess, correctGuesses);
		Iterator it = patternMap.entrySet().iterator();
		Set<String> maxSet = new HashSet<String>();
		String maxPattern = new String();
		//find max set
		while(it.hasNext()){
			Map.Entry pair = (Map.Entry)it.next();
			Set<String> temp = (Set<String>)pair.getValue();
			if(temp.size() > maxSet.size()){
				maxSet = temp;
				maxPattern = (String)pair.getKey();
			}
			else if(temp.size() == maxSet.size()){
				//resolve tie breaker
				//1.Choose the group in which the letter does not appear at all
				//2.If each group has the guess letter, choose the one with the fewest
				String patternCurrent = (String)pair.getKey();
				int countCurrent = 0;
				int countMax = 0;
					//find out how many times letter appears in pattern
				for(int i=0;i<patternCurrent.length();i++){
					if(patternCurrent.charAt(i) == guess){
						countCurrent++;
					}
					else if(maxPattern.charAt(i) == guess)
						countMax++;
				}
			}
		}
		return maxSet;
	}

}
