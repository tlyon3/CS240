package spell;
import java.util.HashSet;
import java.util.Set;
public class Dictionary implements ITrie{
	char[] alphabet = new char[26];
	public Dictionary(){
		root = new Node();
		nodeCount = 1;
		wordCount = 0;
		alphabet[0] ='a';
		alphabet[1] = 'b';
		alphabet[2] = 'c';
		alphabet[3] = 'd';
		alphabet[4] = 'e';
		alphabet[5] = 'f';
		alphabet[6] = 'g';
		alphabet[7] = 'h';
		alphabet[8] = 'i';
		alphabet[9]= 'j';
		alphabet[10] = 'k';
		alphabet[11] = 'l';
		alphabet[12] = 'm';
		alphabet[13] = 'n';
		alphabet[14] = 'o';
		alphabet[15] = 'p';
		alphabet[16] = 'q';
		alphabet[17] = 'r';
		alphabet[18] = 's';
		alphabet[19] = 't';
		alphabet[20] = 'u';
		alphabet[21] = 'v';
		alphabet[22] = 'w';
		alphabet[23] = 'x';
		alphabet[24] = 'y';
		alphabet[25] = 'z';
	}
	
	private Node root;
	private int nodeCount;
	private int wordCount;
	
	@Override
	public void add(String word) {
		if(word.equals(""))
			return;
		word = word.toLowerCase();
		Node currentNode = root;
//		System.out.println("Adding word: "+ word);
		for(int i=0;i<word.length();i++){
			if(currentNode.nodes[word.charAt(i)-'a']==null){
				currentNode.nodes[word.charAt(i)-'a'] = new Node();
				nodeCount++;
//				System.out.println("\tNode count = "+nodeCount);
			}
			currentNode = currentNode.nodes[word.charAt(i)-'a'];
			if(i==word.length()-1){
				if(currentNode.getValue()==0)
					wordCount++;
				currentNode.increaseCount();
//				System.out.println("\tNode count = "+nodeCount);
//				System.out.println("\tCount for '"+word+"' = "+currentNode.getValue());
//				System.out.println("\tWord count = "+wordCount);
			}
		}	
	}

	@Override
	public INode find(String word) {
		//return findReflexive(root, word, 0,word.length());
		Node currentNode = root;
		//System.out.println(word);
		if(word==null)
			return null;
		for(int i=0;i<word.length();i++){
			if(currentNode.nodes[word.charAt(i)-'a']==null)
				return null;
			else
				currentNode = currentNode.nodes[word.charAt(i)-'a'];
		}
		if(currentNode != null && currentNode.getValue()>0)
			return currentNode;
		else return null;
	}
	
	public int findWordCount(String word){
		Node currentNode = root;
		for(int i=0;i<word.length();i++){
			if(currentNode.nodes[word.charAt(i)-'a']==null)
				return 0;
			else
				currentNode = currentNode.nodes[word.charAt(i)-'a'];
		}
		if(currentNode != null && currentNode.getValue()>0)
			return currentNode.getValue();
		else return 0;
	}
		
	@Override
	public String toString(){
		StringBuilder word = new StringBuilder();
		StringBuilder output = new StringBuilder();
		toStringHelper(root, word, output);
		return output.toString();
	}
	
	private void toStringHelper(Node n, StringBuilder word, StringBuilder output){
		if(n==null)
			return;
		if(n.getValue() > 0){
//			System.out.println("\t"+word.toString() + ": "+n.getValue());
			output.append(word.toString() + "\n");
		}
		for(int i=0;i<26;i++){
			word.append(alphabet[i]);
//			System.out.println("Current word: " + word.toString());
			toStringHelper(n.nodes[i],word,output);
			word.setLength(word.length()-1);
		}
	}
	public String toStringWithValues(){
		StringBuilder word = new StringBuilder();
		StringBuilder output = new StringBuilder();
		toStringHelperWithValues(root, word, output);
		return output.toString();
	}
	
	private void toStringHelperWithValues(Node n, StringBuilder word, StringBuilder output){
		if(n==null)
			return;
		if(n.getValue() > 0){
//			System.out.println("\t"+word.toString() + ": "+n.getValue());
			output.append("\t"+word.toString() + " ");
			output.append(this.findWordCount(word.toString()) + "\n");
		}
		for(int i=0;i<26;i++){
			word.append(alphabet[i]);
//			System.out.println("Current word: " + word.toString());
			toStringHelperWithValues(n.nodes[i],word,output);
			word.setLength(word.length()-1);
		}
	}
	@Override
	public int getWordCount() {
		return wordCount;
	}


	@Override
	public int getNodeCount() {
		return nodeCount;
	}
	
	public Set<String> modifyOne(String word){
		Set<String> modifiedWords = new HashSet<String>();//avoid duplications
		for(String modWord : deletion(word)){
			if(word!=null)
				modifiedWords.add(modWord);
		}
		for(String modWord : insertion(word)){
			if(word!=null)
				modifiedWords.add(modWord);
		}
		for(String modWord : alteration(word)){
			if(word!=null)
				modifiedWords.add(modWord);
		}
		for(String modWord : transposition(word)){
			if(word!=null)
				modifiedWords.add(modWord);
		}
		return modifiedWords;
	}
	
	public Set<String> modifyTwo(Set<String> words){
		Set<String> doubleModifiedWords = new HashSet<String>();
		for(String word : words){
			for(String modWord : deletion(word)){
				if(word!=null)
					doubleModifiedWords.add(modWord);
			}
			for(String modWord : insertion(word)){
				if(word!=null)
					doubleModifiedWords.add(modWord);
			}
			for(String modWord : alteration(word)){
				if(word!=null)
					doubleModifiedWords.add(modWord);
			}			
			for(String modWord : transposition(word)){
				if(word!=null)
					doubleModifiedWords.add(modWord);
			}			
		}
		return doubleModifiedWords;
	}
	
	public String[] deletion(String word){
		String[] modifiedWords = new String[word.length()];
		for(int i=0;i<modifiedWords.length;i++){
			StringBuilder sb = new StringBuilder();
			//skip index i
			sb.append(word.substring(0,i));//get everything before index i
			sb.append(word.substring(i+1));//get everything after index i
			modifiedWords[i] = sb.toString();
		}
		return modifiedWords;
	}
	
	public String[] insertion(String word){
		String[] modifiedWords = new String[(word.length()+1)*26];
		for(int i=0;i<word.length()+1;i++){
			int j=0;
			for(int k=0;k<26;k++){
				StringBuilder sb = new StringBuilder();
				sb.append(word.substring(0,i));//everything before insertion index
				sb.append(alphabet[k]);			//insert at insertion index
				sb.append(word.substring(i));	//everything after insertion index
				modifiedWords[i*26 + j++] = sb.toString();
			}
		}
		return modifiedWords;
	}
	
	public String[] transposition(String word){
		int size=0;
		if(word.length() == 0 ){
			size = 1;
		}
		else{
			size = word.length()-1;
		}
		String[] modifiedWords = new String[size];
		for(int i=0;i<word.length()-1;i++){
			StringBuilder sb = new StringBuilder();
			sb.append(word.substring(0,i));//everything before transposition index
			sb.append(word.charAt(i+1));//char at transposition index+1
			sb.append(word.charAt(i));//char at transposition index
			sb.append(word.substring(i+2));//everything after transposition index+2
			modifiedWords[i] = sb.toString();
		}
		return modifiedWords;
	}
	
	public String[] alteration(String word){
		String[] modifiedWords = new String[word.length()*25];
		for(int i=0;i<word.length();i++){
			int j=0;
			char currentLetter = word.charAt(i);
			for(int k=0;k<26;k++){
				if(currentLetter == alphabet[k])
					continue;
			StringBuilder sb = new StringBuilder();
			sb.append(word.substring(0, i));//get everything before alteration index
			sb.append(alphabet[k]);//change char at alteration index
			sb.append(word.substring(i+1));//get everything after alteration index
			modifiedWords[i*25+(j++)] = sb.toString();
			}
		}
		return modifiedWords;
	}
	
	@Override
	public int hashCode(){
		int hash = (this.nodeCount+(2*this.wordCount))%2000;
		return hash;
	}
	
	@Override
	public boolean equals(Object o){
		if(o==null)
			return false;
		if(o.getClass()!=this.getClass())
			return false;
		Dictionary otherDict = (Dictionary)o;
		if(this.wordCount!=otherDict.getWordCount() || this.nodeCount!=otherDict.getNodeCount())
			return false;
		else if(!this.toStringWithValues().equals(otherDict.toStringWithValues()))
			return false;
		else return equalRecurrsive(this.root,otherDict.root);
	}
	
	private boolean equalRecurrsive(Node n1, Node n2){
		for(int i=0;i<26;i++){
//			if(n1.nodes[i]!=n2.nodes[i])
//				return false;
			if(n1.nodes[i]!=null && n2.nodes[i]!=null){
				if(n1.nodes[i].getValue() != n2.nodes[i].getValue())
					return false;
				else equalRecurrsive(n1.nodes[i],n2.nodes[i]);
			}
			else if(n1.nodes[i]==null&&n2.nodes[i]!=null)
				return false;
			else if(n1.nodes[i]!=null&&n2.nodes[i]==null)
				return false;
		}
		return true;
	}
}
