package spell;

public class Dictionary implements ITrie{

	Dictionary(){
		root = new Node();
		nodeCount = 0;
		wordCount = 0;
	}
	private Node root;
	private int nodeCount;
	private int wordCount;
	@Override
	public void add(String word) {
		insertReflexive(root, word, 0, word.length());
	}
	
	public void insertReflexive(Node n, String s, int i, int max){
		if(n.nodes[s.charAt(i)] == null){
			n.nodes[s.charAt(i)] = new Node();
			nodeCount++;
		}
		if(i==max){
			if(n.nodes[s.charAt(i)].getValue()==0)
				wordCount++;
			n.nodes[s.charAt(i)].increaseCount();
			return;
		}
		else{
			insertReflexive(n.nodes[s.charAt(i)],s,++i,max);
		}
	}

	@Override
	public INode find(String word) {
		// TODO Auto-generated method stub
		return findReflexive(root, word, 0,word.length());
		
	}
	public INode findRefelxive(Node n, String s, int i, int max){
		if(n.nodes[s.charAt(i) - 'a'] == null){
			return null;
		}
		if(i==max){
			return n.nodes[s.charAt(i) - 'a'];
		}
		else{
			findRefelxive(n.nodes[s.charAt(i)-'a'],s,++i,max);
		}
		
	}

	@Override
	public int getWordCount() {
		return wordCount;
	}

	@Override
	public int getNodeCount() {
		return nodeCount;
	}
	public class Node implements ITrie.INode{
		Node(){
			count = 0;
			nodes = new Node[26];
		}
		private int count;
		
		public Node[] nodes = new Node[26];
		public void increaseCount(){
			count++;
		}
		
		@Override
		public int getValue() {
			return count;
		}
	}
}
